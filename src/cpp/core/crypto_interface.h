/* This file was generated by cbindgen */
#pragma once

#include <stdint.h>
#include <stddef.h>

namespace crusty {
namespace crypto {

enum class CryptoErrorCode {
    Success = 0,
    InvalidParams = -1,
    AuthenticationFailed = -2,
    EncryptionError = -3,
    DecryptionError = -4,
    KeyDerivationError = -5,
    BufferTooSmall = -6,
    InternalError = -7,
    HardwareNotAvailable = -8
};

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Encrypts data using AES-256-GCM with the provided password
 * 
 * # Safety
 * 
 * This function is unsafe because it dereferences raw pointers.
 * The caller must ensure that:
 * - `data_ptr` points to a valid buffer of at least `data_len` bytes
 * - `password_ptr` points to a valid buffer of at least `password_len` bytes
 * - `output_ptr` points to a buffer of at least `output_max_len` bytes
 * - `output_len` points to a valid `size_t`
 */
int32_t encrypt_data(
    const uint8_t* data_ptr, size_t data_len,
    const uint8_t* password_ptr, size_t password_len,
    uint8_t* output_ptr, size_t output_max_len,
    size_t* output_len
);

/**
 * Decrypts data using AES-256-GCM with the provided password
 * 
 * # Safety
 * 
 * This function is unsafe because it dereferences raw pointers.
 * The caller must ensure that:
 * - `data_ptr` points to a valid buffer of at least `data_len` bytes
 * - `password_ptr` points to a valid buffer of at least `password_len` bytes
 * - `output_ptr` points to a buffer of at least `output_max_len` bytes
 * - `output_len` points to a valid `size_t`
 */
int32_t decrypt_data(
    const uint8_t* data_ptr, size_t data_len,
    const uint8_t* password_ptr, size_t password_len,
    uint8_t* output_ptr, size_t output_max_len,
    size_t* output_len
);

/**
 * Hashes a password using Argon2id for verification
 * 
 * # Safety
 * 
 * This function is unsafe because it dereferences raw pointers.
 * The caller must ensure that:
 * - `password_ptr` points to a valid buffer of at least `password_len` bytes
 * - `output_ptr` points to a buffer of at least `output_len` bytes
 */
int32_t hash_password(
    const uint8_t* password_ptr, size_t password_len,
    uint8_t* output_ptr, size_t output_len
);

/**
 * Derives an encryption key from a password and salt
 * 
 * # Safety
 * 
 * This function is unsafe because it dereferences raw pointers.
 * The caller must ensure that:
 * - `password_ptr` points to a valid buffer of at least `password_len` bytes
 * - `salt_ptr` points to a valid buffer of at least `salt_len` bytes
 * - `key_ptr` points to a buffer of at least `key_len` bytes
 */
int32_t derive_key_from_password(
    const uint8_t* password_ptr, size_t password_len,
    const uint8_t* salt_ptr, size_t salt_len,
    uint8_t* key_ptr, size_t key_len
);

#ifdef __cplusplus
}
#endif

} // namespace crypto
} // namespace crusty
